#!/usr/bin/env python
import json
import os
import subprocess
import sys
from contextlib import suppress
from datetime import datetime, timedelta
from pathlib import Path

from dateutil import tz
from suntime import Sun

WALL_DIR = Path(os.environ["HOME"]) / "Obrazy" / "Tapety"
DYN_WALL_DIR = WALL_DIR / "dyn-wallpaper"
META_FILE = DYN_WALL_DIR / "dyn.json"
SET_COMMAND = ("feh", "--bg-fill", "--no-fehbg", "{}")
LAT = 51.6
LON = 17.2

sun = None
meta = None


def main():
    global sun, meta

    if len(sys.argv) == 2:
        set_dyn_wall_dir(sys.argv[1])

    if not DYN_WALL_DIR.exists():
        print("No wallpaper name given and no default wallpaper set")
        sys.exit(1)

    sun = Sun(LAT, LON)
    with open(META_FILE, "r") as meta_file:
        meta = json.load(meta_file)

    image_name = get_current_image_name(datetime.now(tz.tzlocal()))
    set_wallpaper(DYN_WALL_DIR / image_name)


def set_wallpaper(image_path):
    print(f"Setting wallpaper {image_path}")
    args = (image_path if arg == "{}" else arg for arg in SET_COMMAND)
    subprocess.run(args)


def set_dyn_wall_dir(wall_name):
    dir_path = WALL_DIR / wall_name

    if DYN_WALL_DIR != dir_path:
        with suppress(FileNotFoundError):
            os.remove(DYN_WALL_DIR)
        os.symlink(dir_path, DYN_WALL_DIR)


def get_current_image_name(time):
    today_sunrise = sun.get_local_sunrise_time()
    today_sunset = sun.get_local_sunset_time()

    if time < today_sunrise:
        part = "night"
        slots_start = sun.get_local_sunset_time(datetime.now() - timedelta(days=1))
        slots_stop = today_sunrise
    elif today_sunrise < time < today_sunset:
        part = "day"
        slots_start = today_sunrise
        slots_stop = today_sunset
    elif time > today_sunset:
        part = "night"
        slots_start = today_sunset
        slots_stop = sun.get_local_sunrise_time(datetime.now() + timedelta(days=1))

    slot = get_time_slot(time, slots_start, slots_stop, len(meta[part]))
    return meta[part][slot]


def get_time_slot(current_time, time_start, time_stop, slots):
    if not (time_start < current_time < time_stop):
        raise RuntimeError("Given time not from specified slot frame")
    whole_delta = (time_stop - time_start).seconds / 60
    current_delta = (current_time - time_start).seconds / 60
    slot_delta = whole_delta / slots
    return int(current_delta // slot_delta)


if __name__ == "__main__":
    main()
